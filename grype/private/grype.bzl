"Implementations of grype_report and grype_test rule"

load("@aspect_bazel_lib//lib:paths.bzl", "to_rlocation_path")
load("//grype:database.bzl", "GrypeDatabaseInfo")
load("//grype/private:file_mappings.bzl", "FILE_MAPPINGS")
load("//syft:providers.bzl", "SyftSbomInfo")

_DOC_REPORT = """Generate CVE Report for an syft_sbom using grype binary that is pulled as a toolchain.

```starlark
oci_image(
    name = "image"
)

syft_sbom(
    name = "sbom",
    image = ":image"
)

grype_report(
    name = "report",
    sbom = ":sbom",
    database = "@grype_database",
)
```
"""

_DOC_TEST = """Scans a SBOM for known vulnerabilities and fails if vulnerabilities are found that exceed a certain severity.

```starlark
oci_image(
    name = "image"
)

syft_sbom(
    name = "sbom",
    image = ":image"
)

grype_test(
    name = "test",
    sbom = ":sbom",
    database = "@grype_database",
)
```
"""

# see https://github.com/anchore/grype#configuration
_GRYPE_CONFIG_COMMON_TMPL = """\
# disable checking for application updates on startup
check-for-app-updates: false

db:
  # disable checking for database updates on execution
  auto-update: false

  # location to write the vulnerability database cache
  cache-dir: {database_directory}

  # it ensures db build is no older than the max-allowed-built-age
  # set to false to disable check
  validate-age: {database_validate_age}

  # Max allowed age for vulnerability database,
  # age being the time since it was built
  max-allowed-built-age: {database_max_allowed_built_age}

ignore:
{ignore}
"""

_GRYPE_CONFIG_REPORT_TMPL = _GRYPE_CONFIG_COMMON_TMPL + """
# the output format of the vulnerability report (options: table, template, json, cyclonedx)
output:
{output}
"""

_GRYPE_CONFIG_TEST_TMPL = _GRYPE_CONFIG_COMMON_TMPL + """
# upon scanning, if a severity is found at or above the given severity then the return code will be 1
# default is unset which will skip this validation (options: negligible, low, medium, high, critical)
fail-on-severity: {fail_on_severity}
"""

_GRYPE_TEST_EXECUTABLE_TMPL = """\
#!/bin/sh
cd $RUNFILES_DIR && {grype_path} --config={config_file} sbom:{sbom_file}
"""

def _grype_report_impl(ctx):
    """
    Implementation for generating a CVE report based on an SBOM using grype.

    Args:
        ctx: action context

    Returns:
        The CVE report files generated by this function
    """
    outputs = {}

    sbom_file = ctx.attr.sbom[SyftSbomInfo].syft_json
    database_directory = ctx.attr.database[GrypeDatabaseInfo].cache
    database_validate_age = ctx.attr.database[GrypeDatabaseInfo].validate_age
    database_max_allowed_built_age = ctx.attr.database[GrypeDatabaseInfo].max_allowed_built_age

    ignore_options = ["- vulnerability: {}".format(vuln) for vuln in ctx.attr.ignore_vulnerabilities]
    output_options = []

    for output_format, output_extension in FILE_MAPPINGS.items():
        output_file = ctx.actions.declare_file("{}/report.{}".format(ctx.label.name, output_extension))
        outputs[output_format] = output_file
        output_options.append("- {}={}".format(output_format, output_file.path))

    if ctx.attr.only_fixed:
        ignore_options.append("- fix-state: wont-fix")
        ignore_options.append("- fix-state: not-fixed")
        ignore_options.append("- fix-state: unknown")

    config_file = ctx.actions.declare_file("{}/grype-config.yaml".format(ctx.label.name))
    ctx.actions.write(
        output = config_file,
        content = _GRYPE_CONFIG_REPORT_TMPL.format(
            database_directory = database_directory.path,
            database_validate_age = database_validate_age,
            database_max_allowed_built_age = database_max_allowed_built_age,
            ignore = "\n".join(ignore_options),
            output = "\n".join(output_options),
        ),
    )

    args = ctx.actions.args()
    args.add("--config", config_file.path)
    args.add("sbom:" + sbom_file.path)

    ctx.actions.run(
        executable = ctx.toolchains["@rules_syft//grype:toolchain_type"].grypeinfo.target_tool_path,
        inputs = [config_file, database_directory, sbom_file],
        arguments = [args],
        outputs = outputs.values(),
        tools = ctx.toolchains["@rules_syft//grype:toolchain_type"].grypeinfo.tool_files,
        mnemonic = "GrypeGenerateReport",
        progress_message = "Generating CVE Report for %{label}",
    )

    return [
        DefaultInfo(files = depset(outputs.values())),
    ]

def _grype_test_impl(ctx):
    """
    Implementation for testing for vulnerabilities based on an SBOM using grype.

    Args:
        ctx: action context
    """

    tool_info = ctx.toolchains["@rules_syft//grype:toolchain_type"].grypeinfo

    sbom_file = ctx.attr.sbom[SyftSbomInfo].syft_json
    database_directory = ctx.attr.database[GrypeDatabaseInfo].cache
    database_validate_age = ctx.attr.database[GrypeDatabaseInfo].validate_age
    database_max_allowed_built_age = ctx.attr.database[GrypeDatabaseInfo].max_allowed_built_age

    ignore_options = ["- vulnerability: {}".format(vuln) for vuln in ctx.attr.ignore_vulnerabilities]

    if ctx.attr.only_fixed:
        ignore_options.append("- fix-state: wont-fix")
        ignore_options.append("- fix-state: not-fixed")
        ignore_options.append("- fix-state: unknown")

    config_file = ctx.actions.declare_file("{}/grype-config.yaml".format(ctx.label.name))
    ctx.actions.write(
        output = config_file,
        content = _GRYPE_CONFIG_TEST_TMPL.format(
            database_directory = to_rlocation_path(ctx, database_directory),
            database_validate_age = database_validate_age,
            database_max_allowed_built_age = database_max_allowed_built_age,
            ignore = "\n".join(ignore_options),
            fail_on_severity = ctx.attr.fail_on_severity,
        ),
    )

    runfiles = []
    runfiles.append(sbom_file)
    runfiles.append(config_file)
    runfiles.append(database_directory)
    runfiles.extend(tool_info.tool_files)

    test_executable = ctx.actions.declare_file("{}/test.sh".format(ctx.label.name))
    ctx.actions.write(
        output = test_executable,
        content = _GRYPE_TEST_EXECUTABLE_TMPL.format(
            grype_path = to_rlocation_path(ctx, tool_info.tool_files[0]),
            config_file = to_rlocation_path(ctx, config_file),
            sbom_file = to_rlocation_path(ctx, sbom_file),
        ),
        is_executable = True,
    )

    return [
        DefaultInfo(
            executable = test_executable,
            files = depset([test_executable]),
            runfiles = ctx.runfiles(runfiles),
        ),
    ]

_ATTRS_COMMON = {
    "sbom": attr.label(
        doc = "Label to syft_sbom",
        mandatory = True,
        providers = [SyftSbomInfo],
    ),
    "database": attr.label(
        doc = "Label to grype.database",
        mandatory = True,
        providers = [GrypeDatabaseInfo],
    ),
    "only_fixed": attr.bool(
        doc = "Ignore matches for vulnerabilities that are not fixed",
        default = False,
    ),
    "ignore_vulnerabilities": attr.string_list(
        doc = "Vulnerabilities to ignore",
    ),
    "_windows_constraint": attr.label(default = "@platforms//os:windows"),
}

grype_report = rule(
    implementation = _grype_report_impl,
    doc = _DOC_REPORT,
    attrs = _ATTRS_COMMON,
    toolchains = [
        "@bazel_tools//tools/sh:toolchain_type",
        "@rules_syft//grype:toolchain_type",
    ],
)

grype_test = rule(
    implementation = _grype_test_impl,
    doc = _DOC_TEST,
    attrs = dict(
        fail_on_severity = attr.string(
            doc = "Severity at or above which to fail",
            default = "low",
            values = ["negligible", "low", "medium", "high", "critical"],
        ),
        **_ATTRS_COMMON
    ),
    test = True,
    toolchains = [
        "@bazel_tools//tools/sh:toolchain_type",
        "@rules_syft//grype:toolchain_type",
    ],
)
